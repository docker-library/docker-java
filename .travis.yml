language: bash
services: docker

matrix:
  include:
    - os: linux
      env: VERSION=14 VARIANT=oracle
    - os: linux
      env: VERSION=14
    - os: linux
      env: VERSION=14 VARIANT=slim
    - os: linux
      env: VERSION=14 VARIANT=alpine
    - os: windows
      dist: 1803-containers
      env: VERSION=14 VARIANT=windows/windowsservercore-1803
    - os: linux
      env: VERSION=13 VARIANT=oracle
    - os: linux
      env: VERSION=13
    - os: linux
      env: VERSION=13 VARIANT=slim
    - os: windows
      dist: 1803-containers
      env: VERSION=13 VARIANT=windows/windowsservercore-1803
    - os: linux
      env: VERSION=11
    - os: linux
      env: VERSION=11 VARIANT=slim
    - os: linux
      env: VERSION=11 VARIANT=ubuntu18.04
    - os: linux
      env: VERSION=11 VARIANT=ubuntu16.04
    - os: linux
      env: VERSION=11 VARIANT=centos7
    - os: windows
      dist: 1803-containers
      env: VERSION=11 VARIANT=windows/windowsservercore-1803
    - os: linux
      env: VERSION=8
    - os: linux
      env: VERSION=8 VARIANT=slim
    - os: windows
      dist: 1803-containers
      env: VERSION=8 VARIANT=windows/windowsservercore-1803

install:
  - git clone https://github.com/docker-library/official-images.git ~/official-images
  - if [ "$TRAVIS_OS_NAME" = 'linux' ]; then wget -qO- 'https://github.com/tianon/pgp-happy-eyeballs/raw/master/hack-my-builds.sh' | bash; fi

before_script:
  - env | sort
  - cd "$VERSION"
  - imageBase="openjdk:$VERSION"
  - imageSuffix="${VARIANT:+-$(basename "$VARIANT")}"

script:
  - |
    (
      set -Eeuo pipefail
      build_and_test() {
        local img="$1"; shift
        local dir="$1"; shift
        ( set -x; docker build -t "$img" "$dir" )
        if [ "$TRAVIS_OS_NAME" = 'windows' ]; then
          # TODO make the real tests run successfully on Windows too!
          if [[ "$img" == *-jdk* ]]; then ( set -x; docker run --rm "$img" javac -version ); fi
          ( set -x; docker run --rm "$img" java -version )
        else
          ( set -x; ~/official-images/test/run.sh "$img" )
        fi
      }
      build_and_test "$imageBase-jdk$imageSuffix" "jdk${VARIANT:+/$VARIANT}"
      if [ -d "jre${VARIANT:+/$VARIANT}" ]; then
        build_and_test "$imageBase-jre$imageSuffix" "jre${VARIANT:+/$VARIANT}"
      fi
      if [[ "${VARIANT:-}" == windows/windowsservercore-* ]]; then
        nanoVariant="${VARIANT//windowsservercore/nanoserver}"
        nanoSuffix="$(basename "$nanoVariant")"
        for jdk in jdk jre; do
          if [ -d "$jdk/$nanoVariant" ]; then
            nanoFrom="$(grep -oEm1 -- '--from=[^ ]+' "$jdk/$nanoVariant/Dockerfile")"
            nanoFrom="${nanoFrom#--from=}"
            ( set -x; docker tag "$imageBase-$jdk$imageSuffix" "$nanoFrom" )
            build_and_test "$imageBase-$jdk-$nanoSuffix" "$jdk/$nanoVariant"
          fi
        done
      fi
    )

after_script:
  - docker images

# vim:set et ts=2 sw=2:
